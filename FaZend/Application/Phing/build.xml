<?xml version="1.0" ?>
<!--
 *
 * Copyright (c) FaZend.com
 * All rights reserved.
 *
 * You can use this product "as is" without any warranties from authors.
 * You can change the product only through Google Code repository
 * at http://code.google.com/p/fazend
 * If you have any questions about privacy, please email privacy@fazend.com
 *
 * @copyright Copyright (c) FaZend.com
 * @version $Id$
 * @category FaZend
 *
 * This Phing build file. For more information see this document:
 * http://phing.info/docs/guide/current/
 *
-->

<project basedir="." default="main">

    <!-- Sets the DSTAMP, TSTAMP and TODAY properties --> 
    <tstamp/>

    <includepath classpath="${project.basedir}/src/library" />
    <includepath classpath="${project.basedir}/test" />

    <!-- ftp uploader -->
    <taskdef name="uploadByFTP" classname="src.library.FaZend.Application.Phing.UploadByFTP" />

    <property name="continuumRoot" value="/home/continuum" />
    <property name="serverDocs" value="${continuumRoot}/doc/${phing.project.name}" />
    <property name="serverCoverage" value="${continuumRoot}/coverage/${phing.project.name}" />
    <property name="serverPhpcs" value="${continuumRoot}/phpcs/${phing.project.name}" />

    <target name="main" depends="lint, test, sniffer, deploy, ping, doc">
    </target>

    <target name="lint" description="Run syntax check for all classes" >
        <phplint haltonfailure="yes">
            <fileset dir="${project.basedir}/src/application">
                <include name="**/*.php"/>
                <include name="**/*.html"/>
                <include name="**/*.phtml"/>
                <exclude name=".svn/**"/>
            </fileset>
        </phplint>
    </target>

    <target name="dbdeploy" description="Deploy db changes" >
        <taskdef name="dbdeploy" classname="phing.tasks.ext.dbdeploy.DbDeployTask"/>
        <property name="deployScript" value="${project.basedir}/src/application/deploy/scripts/deploy.sql" />

        <dbdeploy
            url="mysql:host=${db.host};dbname=${db.name}"
            userid="${db.user}"
            password="${db.password}"
            dir="${project.basedir}/database/deltas"
            outputfile="${deployScript}"
            undooutputfile="${deployScript}.undo" />

        <exec 
            command="${progs.mysql} -h${db.host} -u${db.user} -p${db.password} ${db.name} &lt; ${deployScript}"  
            dir="${project.basedir}/src"  
            passthru="true"
            checkreturn="true" />  
    </target>    
            
    <target name="test" description="Run all existing unit-tests" >
        <property name="coveragedir" value="${project.basedir}/reports/coverage" />
        <mkdir dir="${coveragedir}" />

        <!-- we should initialize the application mostly because of dynamic class loaders -->
        <php expression="false; 
            defined('FAZEND_DONT_RUN') or define('FAZEND_DONT_RUN', true); 
            defined('APPLICATION_ENV') or define('APPLICATION_ENV', 'testing'); 
            defined('CLI_ENVIRONMENT') or define('CLI_ENVIRONMENT', true);
            include '${project.basedir}/src/library/FaZend/Application/index.php';" />
        
		<!-- prepare code coverage db -->
		<coverage-setup database="${coveragedir}/coverage.xml">
			<fileset dir="${project.basedir}/src/application">
				<include name="**/*.php"/>
                <exclude name=".svn/**"/>
			</fileset>
		</coverage-setup>

        <phpunit2 printsummary="yes" haltonerror="yes" haltonfailure="yes" codecoverage="true">
            <formatter type="plain" usefile="no" />
            <formatter todir="${project.basedir}/reports" type="xml" usefile="yes" />
            <batchtest>
                <fileset dir="${project.basedir}/src/library/FaZend/Test/tests">
                    <include name="**/*Test.php"/>
                    <exclude name="**/Abstract*.php"/>
                    <exclude name="**/_*.php"/>
                    <exclude name=".svn/**"/>
                </fileset>
                <fileset dir="${project.basedir}/test">
                    <include name="**/*Test.php"/>
                    <exclude name="**/Abstract*.php"/>
                    <exclude name="**/_*.php"/>
                    <exclude name=".svn/**"/>
                </fileset>
            </batchtest>
        </phpunit2>

		<!-- create an HTML report about code coverage -->
		<mkdir dir="${coveragedir}/report" />
		<coverage-report outfile="${coveragedir}/coverage.xml">
			<report todir="${coveragedir}/report" styledir="${project.basedir}/src/library/FaZend/Application/Phing"/>
		</coverage-report>

        <!-- inject revision number into title -->
        <copy file="${coveragedir}/report/index.html" tofile="${coveragedir}/report/index.html.orig" />
        <svnlastrevision workingcopy="${project.basedir}" propertyname="svn.revision" />    
        <exec command="sed 's/Coverage Results/xdebug coverage rev${svn.revision}/g' &lt; ${coveragedir}/report/index.html.orig &gt; ${coveragedir}/report/index.html" 
            passthru="false" checkreturn="true" />  

        <if>
        <available file="${continuumRoot}" type="dir" />
        <then>
            <!-- delete previous coverage report from HTTP hosting and copy a new one -->
            <delete dir="${serverCoverage}" failonerror="true" verbose="false" includeemptydirs="true" />
            <mkdir dir="${serverCoverage}" />
            <copy todir="${serverCoverage}" >
                <fileset dir="${coveragedir}/report" />
            </copy>

            <!-- create .htaccess and .htpasswd files to protect documentation -->
            <exec command="php index.php ProtectDirectory --project=${phing.project.name} --dir=${serverCoverage}"
                dir="/home/continuum/continuumFacade/public"
                escape="false"
                checkreturn="true" />
            <echo msg="Access protection files deployed to code coverage report directory" />    
        </then>
        </if>
    </target>    

    <target name="sniffer" description="PHP Code Sniffer to run">
        <!-- see: http://pear.php.net/package/PHP_CodeSniffer/download -->
        <mkdir dir="${project.basedir}/reports/phpcs" />
        <exec command="phpcs 
            --standard=Zend 
            --report=xml
            --ignore='.svn/*' 
            --extensions='php,phtml' 
            --report-file=${project.basedir}/reports/phpcs/index.xml 
            ${project.basedir}/src/application >/dev/null" 
            escape="false"
            checkreturn="false" />

        <if>
        <available file="${continuumRoot}" type="dir" />
        <then>
            <!-- delete previous PHPCS report from HTTP hosting and copy a new one -->
            <delete dir="${serverPhpcs}" failonerror="true" verbose="false" includeemptydirs="true" />
            <mkdir dir="${serverPhpcs}" />
            <copy todir="${serverPhpcs}" >
                <fileset dir="${project.basedir}/reports/phpcs" />
            </copy>

            <!-- create .htaccess and .htpasswd files to protect documentation -->
            <exec command="php index.php ProtectDirectory --project=${phing.project.name} --dir=${serverPhpcs}"
                dir="/home/continuum/continuumFacade/public"
                escape="false"
                checkreturn="true" />
            <echo msg="Access protection files deployed to PHPCS report directory" />    
        </then>
        </if>
    </target>    

    <target name="deploy" description="Copy working files to FTP">
        <svnlastrevision
            workingcopy="${project.basedir}"
            propertyname="svn.revision" />    

        <echo msg="${svn.revision}" file="${project.basedir}/src/application/deploy/subversion/revision.txt" />    

        <!-- set flag.txt for the application, to notify it that the DB should be resynchronized -->
        <echo msg="${svn.revision}" file="${project.basedir}/src/application/deploy/flag.txt" />
            
        <echo msg="Uploading revision: ${svn.revision}" />    
        
        <!-- build system access file -->
        <property name="access.file" value="${project.basedir}/src/application/deploy/access.txt" />
        <exec command="php index.php Access --project=${phing.project.name} > ${access.file}"
            dir="/home/continuum/continuumFacade/public"
            escape="false"
            checkreturn="true" />
        <echo msg="Access config for /__fz URL saved into ${access.file}" />    

        <!-- the Task is defined as PHP class, see phings/UploadByFTP.php -->
        <uploadByFTP server="${ftp.server}"
            username="${ftp.user}"
            password="${ftp.password}"
            srcdir="${project.basedir}/${ftp.srcdir}"
            destdir="${ftp.destdir}">
        </uploadByFTP>
    </target>

    <target name="ping" description="Ping the production server and show the result">
        <!-- the Task is defined as PHP class, see phings/UploadByFTP.php -->
        <taskdef name="pingFaZend" classname="src.library.FaZend.Application.Phing.PingFaZend" />

        <if>
            <isset property="live.home"/>
            <then>
                <pingFaZend url="${live.home}/__fz/ping/backup" />
            </then>
        </if>
    </target>

    <target name="doc" description="Create phpDoc documentation" >
        <!-- delete all previously created documentation -->
        <delete dir="${project.basedir}/build/doc" failonerror="true" verbose="false" includeemptydirs="true" />

        <!-- create new php documentation -->
        <exec command="phpdoc --useconfig ${project.basedir}/src/library/FaZend/Application/Phing/phpDocumentor.ini" 
            passthru="no" />    
        
        <if>
        <available file="${continuumRoot}" type="dir" />
        <then>
            <!-- delete previous documentation from HTTP hosting and copy a new one -->
            <delete dir="${serverDocs}" failonerror="true" verbose="false" includeemptydirs="true" />
            <mkdir dir="${serverDocs}" />
            <copy todir="${serverDocs}" >
                <fileset dir="${project.basedir}/build/doc" />
            </copy>

            <!-- create .htaccess and .htpasswd files to protect documentation -->
            <exec command="php index.php ProtectDirectory --project=${phing.project.name} --dir=${serverDocs}"
                dir="/home/continuum/continuumFacade/public"
                escape="false"
                checkreturn="true" />
            <echo msg="Access protection files deployed to phpDoc directory" />    
        </then>
        </if>
    </target>    

</project>
